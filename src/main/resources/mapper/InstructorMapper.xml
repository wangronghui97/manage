<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.demo.needmanage.dao.InstructorMapper" >
  <resultMap id="BaseResultMap" type="com.demo.needmanage.entity.Instructor" >
    <constructor >
      <idArg column="id" jdbcType="INTEGER" javaType="java.lang.Integer" />
      <arg column="phone" jdbcType="VARCHAR" javaType="java.lang.String" />
      <arg column="qq" jdbcType="VARCHAR" javaType="java.lang.String" />
      <arg column="sex" jdbcType="INTEGER" javaType="java.lang.Integer" />
      <arg column="name" jdbcType="VARCHAR" javaType="java.lang.String" />
      <arg column="password" jdbcType="VARCHAR" javaType="java.lang.String" />
      <arg column="number" jdbcType="VARCHAR" javaType="java.lang.String" />
    </constructor>
  </resultMap>
  <sql id="Base_Column_List" >
    id, phone, qq, sex, name, password, number
  </sql>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Integer" >
    select 
    <include refid="Base_Column_List" />
    from instructor
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer" >
    delete from instructor
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <insert id="insert" parameterType="com.demo.needmanage.entity.Instructor" >
    insert into instructor (id, phone, qq, 
      sex, name, password, 
      number)
    values (#{id,jdbcType=INTEGER}, #{phone,jdbcType=VARCHAR}, #{qq,jdbcType=VARCHAR}, 
      #{sex,jdbcType=INTEGER}, #{name,jdbcType=VARCHAR}, #{password,jdbcType=VARCHAR}, 
      #{number,jdbcType=VARCHAR})
  </insert>
  <insert id="insertSelective" parameterType="com.demo.needmanage.entity.Instructor" useGeneratedKeys="true" keyProperty="id">
    insert into instructor
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        id,
      </if>
      <if test="phone != null" >
        phone,
      </if>
      <if test="qq != null" >
        qq,
      </if>
      <if test="sex != null" >
        sex,
      </if>
      <if test="name != null" >
        name,
      </if>
      <if test="password != null" >
        password,
      </if>
      <if test="number != null" >
        number,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        #{id,jdbcType=INTEGER},
      </if>
      <if test="phone != null" >
        #{phone,jdbcType=VARCHAR},
      </if>
      <if test="qq != null" >
        #{qq,jdbcType=VARCHAR},
      </if>
      <if test="sex != null" >
        #{sex,jdbcType=INTEGER},
      </if>
      <if test="name != null" >
        #{name,jdbcType=VARCHAR},
      </if>
      <if test="password != null" >
        #{password,jdbcType=VARCHAR},
      </if>
      <if test="number != null" >
        #{number,jdbcType=VARCHAR},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.demo.needmanage.entity.Instructor" >
    update instructor
    <set >
      <if test="phone != null" >
        phone = #{phone,jdbcType=VARCHAR},
      </if>
      <if test="qq != null" >
        qq = #{qq,jdbcType=VARCHAR},
      </if>
      <if test="sex != null" >
        sex = #{sex,jdbcType=INTEGER},
      </if>
      <if test="name != null" >
        name = #{name,jdbcType=VARCHAR},
      </if>
      <if test="password != null" >
        password = #{password,jdbcType=VARCHAR},
      </if>
      <if test="number != null" >
        number = #{number,jdbcType=VARCHAR},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.demo.needmanage.entity.Instructor" >
    update instructor
    set phone = #{phone,jdbcType=VARCHAR},
      qq = #{qq,jdbcType=VARCHAR},
      sex = #{sex,jdbcType=INTEGER},
      name = #{name,jdbcType=VARCHAR},
      password = #{password,jdbcType=VARCHAR},
      number = #{number,jdbcType=VARCHAR}
    where id = #{id,jdbcType=INTEGER}
  </update>


  <select id="selectAllInstructor" resultMap="BaseResultMap" >
    select
    <include refid="Base_Column_List" />
    from instructor

    <if test="number !=null">
      where number like "%"#{number}"%"
    </if>

  </select>


  <select id="selectByOffset" resultMap="BaseResultMap" >
    select
    <include refid="Base_Column_List" />
    from instructor
    <if test="number !=null">
      where number like "%"#{number}"%"
    </if>
    limit #{offset},#{limit}

  </select>


  <select id="selectByNameAndPassword"  resultMap="BaseResultMap">
    select
    <include refid="Base_Column_List" />
    from instructor
    where number=#{name} and password=#{password}
  </select>

</mapper>